call plug#begin('~/.vim/plugged')

" Syntax
Plug 'tpope/vim-git'
Plug 'vim-ruby/vim-ruby'
Plug 'jelera/vim-javascript-syntax'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'othree/html5.vim'
" haml also does Sass and SCSS
Plug 'tpope/vim-haml'
Plug 'leshill/vim-json'
Plug 'tpope/vim-markdown'
Plug 'andersoncustodio/vim-tmux'
Plug '1995eaton/vim-better-javascript-completion'
Plug 'mustache/vim-mustache-handlebars'
Plug 'tpope/vim-cucumber'
Plug 'mxw/vim-jsx'
Plug 'digitaltoad/vim-jade'

" Colour
Plug 'altercation/vim-colors-solarized'

" Actual Plugins
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'SirVer/ultisnips'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-eunuch'
Plug 'editorconfig/editorconfig-vim'
Plug 'rking/ag.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'ahw/vim-pbcopy'
Plug 'tpope/vim-ragtag'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-rails'
Plug 'janko-m/vim-test'
Plug 'junegunn/vim-peekaboo'
Plug 'tpope/vim-vinegar'

call plug#end()

filetype plugin indent on

runtime macros/matchit.vim

" status bar
set statusline=%F%m%r%h%w\  "fullpath and status modified sign
set statusline+=\ %y "filetype
set statusline+=\ %{fugitive#statusline()}
set statusline+=%= " this line bumps the line number to RHS
set statusline+=\ [%l\/%L] "line number and column number


set autoread


" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault


" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=500 ttimeoutlen=100


set nofoldenable


set history=10000

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent


set ignorecase smartcase


set spelllang=en_gb
syntax spell toplevel


" set some markdown specific things
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0


" ruby syntax hghlighting is slower with the newer engine
autocmd FileType ruby setlocal regexpengine=1


set laststatus=2


set linebreak


set incsearch
set hlsearch


set scrolloff=10


set nobackup
set nowritebackup
set noswapfile


set backspace=indent,eol,start

" Enable highlighting for syntax
syntax on


set wildmode=full
set wildmenu

let mapleader=","
noremap \ ,


" ignore git, npm modules and jekyll _site
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux


set number


" pretty colours
set background=light
colorscheme solarized


set cursorline
set colorcolumn=80


set list listchars=tab:»·,trail:·

command! Q q


set splitbelow
set splitright


set mouse=a
set ttymouse=xterm2


set tags=./.tags;

set lazyredraw


" ~~~ MAPPINGS BELOW ~~~


"gtfo ex mode
map Q <Nop>


map <leader>cf :CtrlPClearCache<cr>
map <leader>pj :e package.json<cr>
map <leader>spj :vsplit package.json<cr>


map <leader>t :CtrlP<cr>
map <leader>v :vsplit<CR>
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>


" map saving and tabs to Control-"
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>


" make it do . in visual mode
vnoremap . :norm.<CR>


let g:ctrlp_map =  ''
let g:ctrlp_clear_cache_on_exit = 1


" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o


" ultisnips settings
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]


nnoremap <CR> :noh<CR><CR>


" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor


" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'


" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=


" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

noremap H ^
noremap L $
vnoremap L g_
